//
//  Geometry.lion
//  Lioness Standard Library
//

// Constants

pi = 3.14159265358979
tau = 2 * pi
e = 2.718281828459045
phi = 1.6180339887498948

struct Point {
	x, y
}

struct Size {
	width, height
}

struct Rect {
	origin, size
}

struct vec2 {
	a, b
}

struct vec3 {
	a, b, c
}

struct vec4 {
	a, b, c, d
}

func distanceBetweenPoints(a, b) returns {
	return sqrt((a.x - b.x)^2 + (a.y - b.y)^2)
}

func degToRad(x) returns {
	return x * pi / 180
}

func radToDeg(x) returns {
	return x * 180 / pi
}

func factorial(x) returns {
	
	if x > 1 {
		return x * factorial(x - 1)
	}
	
	return 1
}

// Get wrapped rad angle in range [-pi, pi]
func wrappedRadAngle(x) returns {
	
	while x > pi {
		x -= 2 * pi
	}
	
	while x <= pi {
		x += 2 * pi
	}
	
	return x
}

func sin(x) returns {
	
	x = wrappedRadAngle(x)
	
	// first element of the taylor series
	sum = x
	
	terms = 10
	sign = -1
	exponent = 3
	fact = factorial(3)
	
	do terms times {
		
		sum += sign * (x^exponent / fact)

		sign *= -1
		fact *= (exponent + 1) * (exponent + 2)
		exponent += 2
		
	}
	
	return sum
}

func cos(x) returns {
	
	x = wrappedRadAngle(x)

	// first element of the taylor series
	sum = 1
	
	terms = 10
	sign = -1
	exponent = 2
	fact = factorial(2)
	
	do terms times {

		sum += sign * (x^exponent / fact)

		sign *= -1
		fact *= (exponent + 1) * (exponent + 2)
		exponent += 2
	}
	
	return sum
}

func tan(x) returns {
	return sin(x) / cos(x)
}
